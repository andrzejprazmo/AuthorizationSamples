{"ast":null,"code":"import { catchError, map, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/authorization.service\";\nimport * as i3 from \"@auth0/angular-jwt\";\nexport let ApiInterceptor = /*#__PURE__*/(() => {\n  class ApiInterceptor {\n    constructor(router, authService, jwtService) {\n      this.router = router;\n      this.authService = authService;\n      this.jwtService = jwtService;\n      this.refreshMode = false;\n    }\n\n    intercept(request, next) {\n      const token = this.authService.getToken();\n\n      if (token) {\n        if (this.jwtService.isTokenExpired(token) && !this.refreshMode) {\n          this.refreshMode = true;\n          return this.handleRefreshToken(request, next);\n        } else {\n          return next.handle(this.setAuthHeader(request, token));\n        }\n      } else {\n        return next.handle(request).pipe(map(res => {\n          return res;\n        }), catchError(error => {\n          if (error.status == 401) {\n            this.authService.signOut();\n            this.router.navigate(['./login']);\n          }\n\n          return throwError(() => error);\n        }));\n      }\n    }\n\n    setAuthHeader(request, token) {\n      return request.clone({\n        headers: request.headers.set(\"Authorization\", `Bearer ${token}`)\n      });\n    }\n\n    handleRefreshToken(request, next) {\n      return this.authService.refreshToken().pipe(switchMap(newToken => {\n        this.refreshMode = false;\n        this.authService.signIn(newToken.token);\n        return next.handle(this.setAuthHeader(request, newToken.token));\n      }), catchError(error => {\n        this.refreshMode = false;\n\n        if (error.status == 401) {\n          this.authService.signOut();\n          this.router.navigate(['./login']);\n        }\n\n        return throwError(() => error);\n      }));\n    }\n\n  }\n\n  ApiInterceptor.ɵfac = function ApiInterceptor_Factory(t) {\n    return new (t || ApiInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthorizationService), i0.ɵɵinject(i3.JwtHelperService));\n  };\n\n  ApiInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiInterceptor,\n    factory: ApiInterceptor.ɵfac\n  });\n  return ApiInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}